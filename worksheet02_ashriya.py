# -*- coding: utf-8 -*-
"""worksheet02 ashriya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F3pNJ2KuMCohz-FIEaLKLBJB_RfM_Yhn
"""

import pandas as pd
data = {
    "Name": ["Alice", "Bob", "Charlie"],
    "Age": [25, 30, 35],
    "Salary": [50000, 60000, 70000]
}

df = pd.DataFrame(data)

df.to_csv("bank.csv", index=False)

print("bank.csv file created!")

import pandas as pd
bank_df = pd.read_csv("bank.csv")


object_columns = bank_df.select_dtypes(include='object').columns

unique_values = {col: bank_df[col].unique() for col in object_columns}

null_values = bank_df.isnull().sum()

numeric_df = bank_df.drop(columns=object_columns)

numeric_df.to_csv("banknumericdata.csv", index=False)

new_numeric_df = pd.read_csv("banknumericdata.csv")
summary_statistics = new_numeric_df.describe()

print("Columns with dtype=object:", object_columns)
print("\nUnique values in object columns:")
for col, values in unique_values.items():
    print(f"{col}: {values}")
print("\nNull values in each column:\n", null_values)
print("\nSummary Statistics:\n", summary_statistics)

"""problem2"""

import pandas as pd

data = {
    'StudentID': [1, 2, 3, 4, 5],
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Age': [23, None, 21, 22, None],
    'GPA': [3.5, 3.7, None, 3.6, 3.8],
    'Specialization': ['Surgery', 'Pediatrics', 'Dermatology', 'Cardiology', 'Neurology']
}

medical_student_df = pd.DataFrame(data)

medical_student_df.to_csv("medical_student.csv", index=False)

print("medical_student.csv created successfully!")

medical_df = pd.read_csv("medical_student.csv")

print(medical_df.info())
print("Missing values per column:")
print(medical_df.isnull().sum())

for col in medical_df.columns:
    if medical_df[col].dtype in ['float64', 'int64']:
        medical_df[col].fillna(medical_df[col].mean(), inplace=True)
    else:
        medical_df[col].fillna(method='ffill', inplace=True)

print("Missing values after imputation:")
print(medical_df.isnull().sum())


duplicates_count = medical_df.duplicated().sum()
print(f"Number of duplicate rows: {duplicates_count}")
medical_df = medical_df.drop_duplicates()

"""problem3"""

import pandas as pd


data = {
    "Name": ["Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley", "Heikkinen, Miss. Laina",
             "Futrelle, Mrs. Jacques Heath", "Allen, Mr. William Henry"],
    "Pclass": [3, 1, 3, 1, 2],
    "Sex": ["male", "female", "female", "female", "male"],
    "Age": [22, 38, 26, 35, 35],
    "Fare": [7.25, 71.2833, 7.925, 53.1, 8.05],
    "Survived": [0, 1, 1, 1, 0],
    "Embarked": ["S", "C", "S", "S", "Q"]
}

titanic_df = pd.DataFrame(data)

titanic_df.to_csv("titanic.csv", index=False)
print("titanic.csv file created successfully!")

print(titanic_df)
import pandas as pd

titanic_df = pd.read_csv("titanic.csv")
print("Dataset loaded successfully!")

subset_df = titanic_df[['Name', 'Pclass', 'Sex', 'Age', 'Fare', 'Survived']]
first_class_df = subset_df[subset_df['Pclass'] == 1]

fare_stats = {
    "Mean": first_class_df['Fare'].mean(),
    "Median": first_class_df['Fare'].median(),
    "Max": first_class_df['Fare'].max(),
    "Min": first_class_df['Fare'].min(),
}
print("Fare statistics for first-class passengers:", fare_stats)

"""Problem 2 - Handle Null Values in Age"""

null_ages = subset_df['Age'].isnull().sum()
print(f"Number of null values in 'Age': {null_ages}")

cleaned_subset_df = subset_df.dropna(subset=['Age'])
print(f"Rows remaining after dropping nulls: {cleaned_subset_df.shape[0]}")

"""Problem 3 - One-Hot Encoding for Embarked"""

embarked_encoded = pd.get_dummies(titanic_df['Embarked'], prefix='Embarked')

titanic_df = pd.concat([titanic_df, embarked_encoded], axis=1)
titanic_df.drop(columns=['Embarked'], inplace=True)

print(titanic_df.head())

"""Problem 4 - Survival Rates by Gender"""

import matplotlib.pyplot as plt

# Mean survival rates by gender
survival_rates = titanic_df.groupby('Sex')['Survived'].mean()
print("Survival rates by gender:")
print(survival_rates)

survival_rates.plot(kind='bar', color=['blue', 'orange'])
plt.title("Survival Rates by Gender")
plt.ylabel("Survival Rate")
plt.xlabel("Gender")
plt.show()

"""Problem 5 - Survival Rates by Embarked Port"""

# Mean survival rates by port of embarkation
survival_rates_embarked = titanic_df.groupby(['Embarked_C', 'Embarked_Q', 'Embarked_S'])['Survived'].mean()
print("Survival rates by embarked port:")
print(survival_rates_embarked)

survival_rates_embarked.plot(kind='bar', color=['green', 'red', 'purple'])
plt.title("Survival Rates by Embarked Port")
plt.ylabel("Survival Rate")
plt.xlabel("Embarked Port")
plt.show()

"""Problem 6 (Optional) - Survival Rates by Age Group and Class



"""

titanic_df['AgeGroup'] = pd.qcut(titanic_df['Age'], 5)

# Mean survival rates by AgeGroup and Pclass
survival_by_age_class = titanic_df.groupby(['AgeGroup', 'Pclass'])['Survived'].mean()
print("Survival rates by age group and class:")
print(survival_by_age_class)

survival_by_age_class.unstack().plot(kind='bar', stacked=True)
plt.title("Survival Rates by Age Group and Passenger Class")
plt.ylabel("Survival Rate")
plt.xlabel("Age Group")
plt.legend(title="Pclass")
plt.show()